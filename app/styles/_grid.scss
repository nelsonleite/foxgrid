// =======================
// container
// =======================
.container {
    @each $breakpoint, $val in $breakpoints {
        @if $val == '' {
            @include calc-column-gutter('padding', $breakpoint);
        }
        @else {
            @media (min-width: #{$val}) {
                @include calc-column-gutter('padding', $breakpoint);
            }
        }
    }
}

// =======================
// wrapper for columns
// =======================
.row {
    display: flex;
    flex: 0 1 auto;
    flex-direction: row;
    flex-wrap: wrap;

    // gutter margins
    &:not(.no-gutter) {
        @each $breakpoint, $val in $breakpoints {
            @if $val == '' {
                @include calc-column-gutter('margin', $breakpoint, -1);
            }
            @else {
                @media (min-width: #{$val}) {
                    @include calc-column-gutter('margin', $breakpoint, -1);
                }
            }
        }
    }

    //
    // directions
    //
    &.reverse {
        flex-direction: row-reverse;
    }

    &.vertical {
        flex-direction: column;
    }

    &.vertical-reverse {
        flex-direction: column-reverse;
    }

    //
    // gutter modifications
    //
    &.no-gutter-row,
    &.no-gutter {
        margin-right: 0;
        margin-left: 0;
    }
}

// =======================
// columns
// =======================
$list: '';

@each $breakpoint, $val in $breakpoints {
    @for $i from 1 through $grid-columns {
        $list: append($list, '.col-#{$breakpoint}-#{$i},', comma);
    }
}

$list: remove-nth($list, 1);

//
// common styles
//
#{$list},
.col-auto {
    flex: 1 0 auto;

    @each $breakpoint, $val in $breakpoints {
        @if $val == '' {
            @include calc-column-gutter('padding', $breakpoint);
        }
        @else {
            @media (min-width: #{$val}) {
                @include calc-column-gutter('padding', $breakpoint);
            }
        }
    }

    // remove gutter
    .row.no-gutter & {
        padding: 0;
    }
}

//
// grid for each screen breakpoint
//
@each $breakpoint, $val in $breakpoints {
    @if $val == '' {
        @include calc-grid-column($breakpoint, 'width');
        @include calc-grid-column($breakpoint, 'offset');
        .col-#{$breakpoint}-first { order: -1; }
        .col-#{$breakpoint}-last { order: 1; }
    }
    @else {
        @media (min-width: #{$val}) {
            @include calc-grid-column($breakpoint, 'width');
            @include calc-grid-column($breakpoint, 'offset');
            .col-#{$breakpoint}-first { order: -1; }
            .col-#{$breakpoint}-last { order: 1; }
        }
    }
}

// =======================
// alignments
// =======================
// horizontal
.justify-start {
    justify-content: flex-start;
    text-align: start;
}

.justify-center {
    justify-content: center;
    text-align: center;
}

.justify-end {
    justify-content: flex-end;
    text-align: end;
}

// vertical
.align-start {
    align-items: flex-start;
}

.align-center {
    align-items: center;
}

.align-end {
    align-items: flex-end;
}
