/**
 * Removing list value at nth index
 * @param  {list} $list  List to remove the item
 * @param  {list} $index Index for the item to be removed
 * @return {list}        List with the item removed
 */
@function remove-nth($list, $index) {
    $result: null;

    @if type-of($index) != number {
        @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }

    @else if $index == 0 {
        @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }

    @else if abs($index) > length($list) {
        @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }

    @else {
        $result: ();
        $index: if($index < 0, length($list) + $index + 1, $index);

        @for $i from 1 through length($list) {
            @if $i != $index {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}

/**
 * Calculate dimensions for each column
 * @param $breakpoint
 */
@mixin calc-grid-column($breakpoint) {
    @for $i from 1 through $grid-columns {
        .col-#{$breakpoint}-#{$i} {
            flex-basis: percentage($i / $grid-columns);
            max-width: percentage($i / $grid-columns);
        }
    }
}

/**
 * Calculate gutter width
 * @param  $property    Property to apply the value
 * @param  $breakpoint
 * @param  $abs         [1, -1] Whether the $property value is positive or negative
 */
@mixin calc-column-gutter($property, $breakpoint, $abs: 1) {
    #{$property}-right: floor(((map-get($gutter-map, #{$breakpoint}) * $abs) / 2)) + px;
    #{$property}-left: ceil(((map-get($gutter-map, #{$breakpoint}) * $abs) / 2)) + px;
}
